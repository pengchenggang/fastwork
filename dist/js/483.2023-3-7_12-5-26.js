"use strict";(self["webpackChunkfastwork"]=self["webpackChunkfastwork"]||[]).push([[483],{6483:function(n,r,e){e.r(r),r["default"]="<template>\r\n  <div>\r\n    <compLayout>\r\n      <div slot=\"anchor\">\r\n        <anchorZen :links=\"['概述,GS',\r\n        '安装方法,AZFF',\r\n        '使用方法,SYFF',\r\n        'ctx 上下文,CTX',\r\n        'next,NEXT',\r\n        'ctx.nextJump,NEXTJUMP',\r\n        'ctx.goto,GOTO',\r\n        'ctx.ifTo,IFTO',\r\n        '源代码,YDM',\r\n        '结语,JY'\r\n        ]\" />\r\n      </div>\r\n      <div slot=\"content\">\r\n        <h1>getAc 异步执行函数队列</h1>\r\n        <blockquote>\r\n          <p>时间：20230306</p>\r\n          <p>作者：彭成刚</p>\r\n        </blockquote>\r\n        <h2 id=\"GS\">概述</h2>\r\n        <ul>\r\n          <li>环境: vue2</li>\r\n          <li>解决: 同步代码与异步代码的回调问题</li>\r\n          <li>具体: 顺序执行 this.$api</li>\r\n        </ul>\r\n        <h2 id=\"AZFF\">安装方法</h2>\r\n        <ol>\r\n          <li>将 asyncTool.js 放入到 /src/libs/asyncTool.js</li>\r\n          <li>main.js 添加如下代码</li>\r\n        </ol>\r\n        <codeIn>\r\n          <pre v-highlight><code>import AsyncTool from '@/libs/asyncTool'\r\nVue.prototype.$getAc = () => {\r\n  return new AsyncTool()\r\n}</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"SYFF\">使用方法</h2>\r\n        <h3>方式1: 加载函数</h3>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use(this.yourFunction) // yourFunction (ctx, next)\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h3>方式2: 内嵌函数</h3>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use((ctx, next) => {\r\n  // your code\r\n  next()\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h3>方式3: 内嵌简单函数</h3>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use(next => {\r\n  // your code\r\n  next()\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h3>方式4: Last函数</h3>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.run(() => {\r\n  // your last code\r\n})</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"CTX\">ctx 上下文</h2>\r\n        <p>这个实例ac的全局对象，一般将此次业务的参数或结果存入里面</p>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.ctx.yourParamA = 'ok'\r\nac.use((ctx, next) => {\r\n  console.info(ctx.yourParamA) // ok\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"NEXT\">next</h2>\r\n        <p>next() 将执行下一个队列函数，并将ctx传递下去</p>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use((ctx, next) => {\r\n  ctx.a = 'ok'\r\n  next() // 这里就执行到了下一个函数\r\n})\r\nac.use((ctx, next) => {\r\n  console.info(ctx.a) // ok\r\n  next()\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n          <h2 id=\"NEXTJUMP\">ctx.nextJump</h2>\r\n          <p>ctx.nextJump() 将执行下下一个队列函数，并将ctx传递下去</p>\r\n          <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use((ctx, next) => {\r\n  ctx.a = 'ok'\r\n  ctx.nextJump() // 跳过下个函数执行\r\n})\r\nac.use((ctx, next) => {\r\n  console.info('我没有被执行')\r\n  next()\r\n})\r\nac.use((ctx, next) => {\r\n  console.info(ctx.a) // ok\r\n  next()\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"GOTO\">ctx.goto</h2>\r\n        <p>ctx.goto('functionName') 将执行指定函数，并将ctx传递下去</p>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\nac.use((ctx, next) => {\r\n  ctx.goto('havaNameFunctionRef') // 跳转到指定名称的函数\r\n})\r\nac.use(this.havaNameFunction, { ref: 'havaNameFunctionRef' })\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"IFTO\">ctx.ifTo</h2>\r\n        <p>ctx.ifTo(boolValue, next) 根据boolValue 判断是否进入next</p>\r\n        <codeIn>\r\n          <pre v-highlight><code>const ac = this.$getAc()\r\n  ac.ctx.yourCheck = true\r\nac.use((ctx, next) => {\r\n  if (ctx.ifTo(!ctx.yourCheck, next)) return\r\n  // your code\r\n})\r\nac.use(next => {\r\n  console.info('I am next function')\r\n})\r\nac.run()</code></pre>\r\n        </codeIn>\r\n        <h2 id=\"YDM\">源代码</h2>\r\n        <codeIn>\r\n          <codeZen url=\"src/libs/asyncTool.js\"\r\n                   codeClass=\"language-javascript\"></codeZen>\r\n        </codeIn>\r\n        <h2 id=\"JY\">结语</h2>\r\n        <p>此套代码灵感来源KOA 2023 Year written</p>\r\n        \x3c!-- <h2>开发小计</h2>\r\n        <ul>\r\n          <li>highlightjs demo => A 11 Y Dark</li>\r\n          <li><a href=\"https://highlightjs.org/static/demo/\"\r\n               target=\"_blank\">https://highlightjs.org/static/demo/</a></li>\r\n        </ul> --\x3e\r\n      </div>\r\n    </compLayout>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport codeZen from '@/components/playground/codeZen.vue'\r\nexport default {\r\n  name: 'getAcPage',\r\n  props: {},\r\n  components: { codeZen },\r\n  data () {\r\n    return {\r\n    }\r\n  },\r\n  watch: {},\r\n  computed: {},\r\n  methods: {\r\n    getCode1 () {\r\n      const code = `\r\n<h1 title=\"kk\">\r\nkkk\r\n</h1>\r\n`\r\n      return code.trim()\r\n    },\r\n  },\r\n  created () { },\r\n  activated () { },\r\n  mounted () {\r\n    // import('!!raw-loader!./test.vue').then(module => {\r\n    //   const code = module.default\r\n    //   console.info('module.default code', code)\r\n    // })\r\n  },\r\n  beforeDestroy () { }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n</style>\r\n"}}]);