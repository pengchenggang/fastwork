"use strict";(self["webpackChunkfastwork"]=self["webpackChunkfastwork"]||[]).push([[4955],{54955:function(n,e,t){t.r(e),e["default"]="<template>\n  <span style=\"width: 100px; display: inline-block;\">\n    <Input v-model=\"inputNumberValue\"\n           :placeholder=\"placeholder\"\n           :disabled=\"disabled\"\n           @on-keyup=\"keyup\"\n           @on-blur=\"blur\"\n           @on-keydown=\"keydown\" />\n  </span>\n</template>\n\n<script>\nexport default {\n  name: 'InputNumberZen',\n  components: {},\n  props: {\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    integer: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    maxlength: {\n      type: Number,\n      default: 9\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      inputNumberValue: '',\n\n    }\n  },\n  computed: {\n    keyList () {\n      const keyListBase = [\n        8, // 退格键\n        9, // tab\n        96, // 0\n        97, // 1\n        98, // 2\n        99, // 3\n        100, // 4\n        101, // 5\n        102, // 6\n        103, // 7\n        104, // 8\n        105, // 9\n        // 110, // .\n        // 190, // .\n        46, // del\n        48, // 0\n        49, // 1\n        50, // 2\n        51, // 3\n        52, // 4\n        53, // 5\n        54, // 6\n        55, // 7\n        56, // 8\n        57, // 9\n        37, // left\n        39 // right\n      ]\n      if (this.integer) { // 整数\n        return keyListBase\n      } else { // 小数\n        return [...keyListBase, 110, 190]\n      }\n    }\n  },\n  methods: {\n    blur (e) {\n      let val = this.inputNumberValue.toString()\n      if (val !== '') {\n        this.inputNumberValue = Number(val).toString()\n      }\n      console.info('inputNumberValue', this.inputNumberValue)\n      this.$emit('on-blur')\n    },\n    formatDecimal (num, decimal) {\n      num = num.toString()\n      let index = num.indexOf('.')\n      if (index !== -1) {\n        num = num.substring(0, decimal + index + 1)\n      } else {\n        num = num.substring(0)\n      }\n      return parseFloat(num).toFixed(decimal)\n    },\n    keyup (e) {\n      if (isNaN(this.inputNumberValue)) {\n        this.inputNumberValue = ''\n      }\n      if (this.inputNumberValue === '') {\n        return\n      }\n      console.info('inputNumberValue', this.inputNumberValue)\n      // console.info('keyup::e', e)\n      let val = this.inputNumberValue.toString()\n      if (val.includes('.')) {\n        if (val.indexOf('.') === val.length - 1) {\n          // 最后一位是点 就不格式化\n        } else {\n          if (val.indexOf('.') < val.length - 2) { // 小数点后两位\n            this.inputNumberValue = this.formatDecimal(Number(val), 2).toString()\n          } else {\n            const last1 = val.charAt(val.length - 1)\n            const last2 = val.charAt(val.length - 2) + last1\n            if (last1 === '0' || last2 === '00') {\n              // 不格式化\n            } else {\n              this.inputNumberValue = Number(val).toString()\n            }\n          }\n        }\n      } else {\n        this.inputNumberValue = Number(val).toString()\n      }\n    },\n    // 最长10位 可以输入小数点后两位\n    // 小数点后保留2位小数的正则表达式\n    keydown (e) {\n      console.info('e.keyCode', e.keyCode, e.target.value)\n      let across = this.keyList.includes(e.keyCode)\n      if (!across) { // 只能输入数字点和退格键\n        // console.info('1')\n        e.preventDefault()\n        return\n      }\n      // 点不能开头\n      if (e.keyCode === 110 && this.inputNumberValue === '') {\n        // console.info('2')\n        e.preventDefault()\n        return\n      }\n      // 有点了就不能再输入点了\n      if (this.inputNumberValue.toString().indexOf('.') > -1 && e.keyCode === 110) {\n        // console.info('3')\n        e.preventDefault()\n        return\n      }\n      if (this.inputNumberValue.length === this.maxlength && ![8, 9, 37, 39].includes(e.keyCode)) {\n        // console.info('4')\n        e.preventDefault()\n      }\n      // let reg = /^(([1-9]{1}\\d*)|(0{1}))(\\.\\d{0,2})?$/\n      // let expression1 = reg.test(this.inputNumberValue)\n      // let expression2 = this.inputNumberValue.length > this.maxlength\n      // if (!expression1 || expression2) {\n      //   e.preventDefault()\n      // } else {\n      //   this.$emit('input', this.inputNumberValue)\n      // }\n    }\n  },\n  watch: {\n    value: function (val) {\n      this.inputNumberValue = this.value.toString()\n    },\n    inputNumberValue: function (val) {\n      this.$emit('input', val)\n    }\n  },\n  created () { },\n  mounted () {\n    // console.info('InputNumberZen::value', this.value)\n    this.inputNumberValue = this.value.toString()\n  }\n}\n<\/script>\n\n<style>\n</style>\n"}}]);