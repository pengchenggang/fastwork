"use strict";(self["webpackChunkfastwork"]=self["webpackChunkfastwork"]||[]).push([[399],{8399:function(n,t,e){e.r(t),t["default"]="/**\r\n * 自定义代码高亮插件\r\n */\r\nimport hljs from 'highlight.js'\r\nimport 'highlight.js/styles/a11y-dark.css' // 导入代码高亮样式\r\n// import 'highlight.js/styles/vs.css'\r\n\r\nconst install = function (Vue) {\r\n  Vue.directive('highlight', {\r\n    deep: true,\r\n    bind (el, binding) {\r\n      // console.info('el, binding', el, binding)\r\n      // on first bind, highlight all targets\r\n      let targets = el.querySelectorAll('code')\r\n\r\n      targets.forEach(target => {\r\n        console.info('target', target)\r\n        if (typeof binding.value === 'string') {\r\n          // if a value is directly assigned to the directive, use this\r\n          // instead of the element content.\r\n          target.textContent = binding.value\r\n        }\r\n        hljs.highlightBlock(target)\r\n      })\r\n    },\r\n    componentUpdated (el, binding) {\r\n      // after an update, re-fill the content and then highlight\r\n      let targets = el.querySelectorAll('code')\r\n\r\n      targets.forEach(target => {\r\n        if (typeof binding.value === 'string') {\r\n          // if a value is directly assigned to the directive, use this\r\n          // instead of the element content.\r\n          target.textContent = binding.value\r\n          hljs.highlightBlock(target)\r\n        }\r\n      })\r\n    },\r\n  })\r\n\r\n}\r\n\r\nif (window.Vue) {\r\n  window['highlight'] = highlight // eslint-disable-line\r\n  Vue.use(install) // eslint-disable-line\r\n}\r\n\r\nexport default install\r\n"}}]);