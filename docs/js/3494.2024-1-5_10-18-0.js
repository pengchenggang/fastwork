"use strict";(self["webpackChunkfastwork"]=self["webpackChunkfastwork"]||[]).push([[3494],{43494:function(n,r,e){e.r(r),r["default"]='<template>\r\n  <div>\r\n    <compLayout>\r\n      <h1>Plopjs 微型脚手架</h1>\r\n      <h2 id="GS">概述</h2>\r\n      <ul class="list">\r\n        <li>主要功能：创建页面模板文件</li>\r\n        <li>plopjs 官网：<a href="https://plopjs.com/documentation/"\r\n             target="_blank">https://plopjs.com/documentation/</a></li>\r\n      </ul>\r\n      <h2 id="AZYLK">安装依赖库</h2>\r\n      <c>npm install --save-dev plop</c> 先把库装上\r\n      <h2 id="PZWJ">配置文件</h2>\r\n      <p>根目录创建 <c>plopfile.js</c>\r\n      </p>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>export default function (plop) {\r\n  // 入口函数\r\n  plop.setGenerator(\'basics\', {\r\n    description: \'描述文字不显示在控制台\',\r\n    prompts: [], // 这里是提问的问题\r\n    actions: [], // 这里是执行的函数\r\n  })\r\n};</code></pre>\r\n      </codeIn>\r\n      <h2 id="ZXJB">执行脚本</h2>\r\n      <h3>package.json</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>{\r\n    ...,\r\n    "scripts": {\r\n        "plop": "plop"\r\n    },\r\n    ...\r\n}</code></pre>\r\n      </codeIn>\r\n      <h2 id="XGJBLX">修改脚本类型</h2>\r\n      <p>如果不了解ESM,可以看我写的这篇文章\r\n        <a href="https://www.cnblogs.com/pengchenggang/p/17037512.html"\r\n           target="_blank">CommonJs VS ES Module</a>\r\n      </p>\r\n      <h3>package.json</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>{\r\n    ...,\r\n    "type": "module",\r\n    ...\r\n}</code></pre>\r\n      </codeIn>\r\n      <blockquote>\r\n        <p>到这里我们已经可以通过 <c>npm run plop</c> 跑通这个命令了，最小循环已完成，下面进行配置文件的扩展。</p>\r\n      </blockquote>\r\n      <h2 id="PZWJDTW">配置文件带提问</h2>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>export default function (plop) {\r\n    // controller generator\r\n    plop.setGenerator(\'controller\', {\r\n        description: \'application controller logic\',\r\n        prompts: [{\r\n            type: \'input\',\r\n            name: \'name\',\r\n            message: \'controller name please\'\r\n        }],\r\n        actions: [{\r\n            type: \'add\',\r\n            path: \'src/{_{ name }_}.js\', // 请忽略下划线\r\n            templateFile: \'plop-templates/controller.hbs\'\r\n        }]\r\n    });\r\n};</code></pre>\r\n      </codeIn>\r\n      <ul class="list">\r\n        <li>\r\n          <p>执行 <c>npm run plop</c> 查看下效果</p>\r\n        </li>\r\n        <li>报错 发现找不到 <c>plop-templates/controller.hbs</c> 文件</li>\r\n      </ul>\r\n      <h2 id="CJMBWJ">创建模板文件</h2>\r\n      <ul class="list">\r\n        <li>先在根目录创建 <c>plop-templates</c> 目录</li>\r\n        <li>再在里面创建 <c>controller.hbs</c> 文件</li>\r\n        <li>执行 <c>npm run plop</c> 输入name, 然后会在src的目录下生成指定的文件</li>\r\n      </ul>\r\n      <h2 id="HFcommonjs">恢复commonjs</h2>\r\n      <ul class="list">\r\n        <li>package.json中 如果不写type, 默认是commonjs。</li>\r\n        <li>\r\n          <c>"type": "commonjs"</c>\r\n        </li>\r\n        <li>之前我们改为了 <c>"type": "module",</c>, 现在我们恢复回来</li>\r\n        <li>为什么恢复？因为我用的vue cli,之前的代码都用的commonjs,我懒的改了</li>\r\n      </ul>\r\n      <blockquote>\r\n        <p>删除 package.json 中的 <c>"type": "module",</c>\r\n        </p>\r\n      </blockquote>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>module.exports = function (plop) {\r\n  // controller generator\r\n  plop.setGenerator(\'controller\', {\r\n    description: \'application controller logic\',\r\n    prompts: [{\r\n      type: \'input\',\r\n      name: \'name\',\r\n      message: \'controller name please\'\r\n    }],\r\n    actions: [{\r\n      type: \'add\',\r\n      path: \'src/{_{name}_}.vue\', // 忽略下划线\r\n      templateFile: \'plop-templates/controller.hbs\'\r\n    }]\r\n  })\r\n}</code></pre>\r\n      </codeIn>\r\n      <h2 id="DTAction">动态Action</h2>\r\n      <p>需求：执行不同的动作</p>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>module.exports = function (plop) {\r\n  plop.setGenerator(\'fc_page\', {\r\n    description: \'application fc_page logic\',\r\n    prompts: [{\r\n      type: \'confirm\',\r\n      name: \'needLess\',\r\n      message: \'是否需要样式文件（默认需要）\',\r\n      default:true,\r\n    }],\r\n    actions(data) {\r\n      if (data.needLess) {\r\n        return [];\r\n      }\r\n      return [];\r\n    },\r\n  });\r\n};</code></pre>\r\n      </codeIn>\r\n      <h2 id="DGsetGenerator">多个setGenerator</h2>\r\n      <ul class="list">\r\n        <li>需求：有多个命令的时候，设置多个生成器</li>\r\n        <li>可以使用 <c>npm run plop [name]</c> 执行相应的命令</li>\r\n        <li>如果不输入[name]会出来个列表，进行选择</li>\r\n      </ul>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>const viewGenerator = require(\'./plop-templates/view/prompt\')\r\nconst componentGenerator = require(\'./plop-templates/component/prompt\')\r\nconst storeGenerator = require(\'./plop-templates/store/prompt.js\')\r\n\r\nmodule.exports = function(plop) {\r\n  plop.setGenerator(\'view\', viewGenerator)\r\n  plop.setGenerator(\'component\', componentGenerator)\r\n  plop.setGenerator(\'store\', storeGenerator)\r\n}</code></pre>\r\n      </codeIn>\r\n      <h2 id="Handlebars">Handlebars模板语言</h2>\r\n      <ul class="list">\r\n        <li>需求：模板里面的需要有替换的变量</li>\r\n        <li>Handlebars官网：<a href="https://handlebarsjs.com/zh/guide/"\r\n             target="_blank">https://handlebarsjs.com/zh/guide/</a></li>\r\n      </ul>\r\n      <h3>plop-templates/controller.hbs</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code><div>\r\n{_{name}_} // 忽略下划线\r\n  </div>\r\n</code></pre>\r\n      </codeIn>\r\n      <blockquote>\r\n        <p>这样生成的文件里面的变量就被替换了</p>\r\n      </blockquote>\r\n      <h2 id="TJYMGNFX">添加页面功能分析</h2>\r\n      <ul class="list">\r\n        <li>在src/views/components下建立页面目录 名字为 变量name</li>\r\n        <li>将模板文件copy到刚才的目录下文件名为 [name].vue</li>\r\n        <li>模板文件相应id替换成name的名字</li>\r\n        <li>将页面的路由添加上 重点就是添加路由</li>\r\n      </ul>\r\n      <h3>创建目录和文件的action这么写</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>actions: [\r\n  {\r\n    type: \'add\', // 代表添加文件\r\n    path: \'src/components/{_{name}_}/{_{name}_}.vue\', // 这里的name就是上面定义的键 忽略下划线\r\n    templateFile: \'plop-templates/component.hbs\'\r\n  }\r\n]\r\n</code></pre>\r\n      </codeIn>\r\n      <h3>修改路由的代码</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>actions: [{\r\n      type: \'modify\',\r\n      path: \'src/router/index.js\',\r\n      pattern: /\\/\\/ ---ROUTER_IMPORT---/g,\r\n      template: `{path: \'${path}\', name: \'/main/${path}\', component: () => import(\'src/components/main/${filePath}/${path}\')},\r\n       // ---ROUTER_IMPORT---` // 这个是查找文件插入位置的标识\r\n</code></pre>\r\n      </codeIn>\r\n      <p>代码来源：<a href="https://blog.csdn.net/gaoyan666/article/details/110480430"\r\n           target="_blank">link</a></p>\r\n\r\n      <h2 id="YDM">源代码</h2>\r\n      <h3>plopfile.js</h3>\r\n      <codeIn>\r\n        <codeZen url="src/views/components/plopjsPage/plopfile.js"\r\n                 codeClass="language-javascript"></codeZen>\r\n      </codeIn>\r\n      <h3>plop-templates/componentsListTemplate.hbs</h3>\r\n      <codeIn>\r\n        <pre v-highlight><code>{\r\n    path: \'{_{eName}_}Page\',\r\n    name: \'{_{eName}_}Page\',\r\n    naviName: \'{_{cName}_}\',\r\n    component: () => import(\'@/views/components/{_{eName}_}Page/{_{eName}_}Page.vue\'), // 忽略下划线\r\n  },\r\n  // ---ROUTER_IMPORT---\r\n</code></pre>\r\n      </codeIn>\r\n      <h3>plop-templates/compTemplate.hbs</h3>\r\n      <codeIn>\r\n        <codeZen url="src/views/components/plopjsPage/compTemplate.vue"\r\n                 codeClass="language-xml"></codeZen>\r\n      </codeIn>\r\n    </compLayout>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \'plopjs\',\r\n  props: {},\r\n  components: {},\r\n  data () {\r\n    return {\r\n    }\r\n  },\r\n  watch: {},\r\n  computed: {},\r\n  methods: {},\r\n  created () { },\r\n  activated () { },\r\n  mounted () { },\r\n  beforeDestroy () { }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n</style>\r\n'}}]);